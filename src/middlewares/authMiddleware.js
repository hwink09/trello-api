import { StatusCodes } from 'http-status-codes'
import { JwtProvider } from '~/providers/JwtProvider'
import { env } from '~/config/environment'
import ApiError from '~/utils/ApiError'

// Middleware x√°c th·ª±c ng∆∞·ªùi d√πng (User) d·ª±a v√†o accessToken
const isAuthorized = async (req, res, next) => {
  // l·∫•y accessToken t·ª´ request cookies ph√≠a client - withCredentials trong file authorizeAxios
  const clientAccessToken = req.cookies?.accessToken

  // n·∫øu kh√¥ng c√≥ accessToken trong request cookies
  if (!clientAccessToken) {
    next(
      new ApiError(StatusCodes.UNAUTHORIZED, 'Unauthorized! No token provided')
    )
    return
  }

  try {
    // 1. Gi·∫£i m√£ token xem c√≥ h·ª£p l·ªá kh√¥ng
    const accessTokenDecoded = await JwtProvider.verifyToken(
      clientAccessToken,
      env.ACCESS_TOKEN_SECRET_SIGNATURE
    )
    // 2. Quan tr·ªçng: N·∫øu token h·ª£p l·ªá th√¨ l∆∞u th√¥ng tin gi·∫£i m√£ ƒë∆∞·ª£c v√†o req.jwtDecoded, ƒë·ªÉ s·ª≠ d·ª•ng cho c√°c t·∫ßng x·ª≠ l√≠ b√™n d∆∞·ªõi
    req.jwtDecoded = accessTokenDecoded
    // 3. Cho ph√©p request ti·∫øp t·ª•c
    next()
  } catch (error) {
    console.log('üöÄ ~ isAuthorized ~ error:', error)
    // N·∫øu accessToken h·∫øt h·∫°n(expired) ... th√¨ tr·∫£ v·ªÅ l·ªói cho FE g·ªçi API refreshToken
    if (error?.message?.includes('jwt expired')) {
      next(new ApiError(StatusCodes.GONE,'Unauthorized! Token expired. Please refresh token'))
      return
    }
    // N·∫øu accessToken kh√¥ng h·ª£p l·ªá b·∫•t k√¨ ƒëi·ªÅu g√¨ kh√°c v·ª• h·∫øt h·∫°n th√¨ c·ª© tr·∫£ v·ªÅ 401 cho FE g·ªçi API signout
    next(new ApiError(StatusCodes.UNAUTHORIZED, 'Unauthorized!'))
  }
}

export const authMiddleware = {
  isAuthorized
}
